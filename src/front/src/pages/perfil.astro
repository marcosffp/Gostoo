---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Logo from "../components/Logo.astro";
import { Icon } from "astro-icon/components";
import Footer from "../components/Footer.astro";
---

<Layout title={"Gostô? - Perfil"}>
  <Header />
  <Logo />
  <main>
    <!-- Coluna 1: Perfil e Info -->
    <div class="column-1">
      <section class="profile">
        <img src="" alt="" class="banner-image" id="banner-img" />
        <img src="" alt="" class="profile-image" id="profile-img" />
        <h2 class="font-semibold mt-2 text-lg" id="profile-name"></h2>
        <p id="profile-description"></p>
        <div class="profile-actions" id="profile-actions">
          <p class="edit-action" id="edit-action">
            <Icon
              name="hugeicons:pencil-edit-01"
              size={30}
              color="rgb(var(--second-color))"
              class="icon text-yellow-500"
            />
          </p>
          <p class="delete-action" id="delete-action">
            <Icon
              name="hugeicons:delete-03"
              size={30}
              color="rgb(var(--second-color))"
              class="icon text-red-600"
            />
          </p>
        </div>
      </section>

      <section
        class="bg-gray-100 rounded-lg shadow-lg flex flex-col items-center relative pb-4 overflow-x-hidden"
        id="business-images"
      >
        <h2 class="font-bold text-2xl mb-3">Imagens do Estabelecimento</h2>
        <Icon
          name="hugeicons:image-add-02"
          size={30}
          color="rgb(var(--second-color))"
          class="icon text-orange-700 mb-4"
          id="add-image-action"
        />
        <form
          class="flex justify-center align-middle flex-wrap mb-4"
          id="image-form"
        >
          <label
            class="file-label flex items-center bg-orange-600 text-white rounded-lg px-4 py-2 cursor-pointer hover:bg-orange-700 transition duration-200"
          >
            <input
              type="file"
              accept="image/*"
              id="image-field"
              class="opacity-0 w-0 h-0"
              required
            />
            <span class="file-icon mr-2">
              <Icon name="hugeicons:inbox-upload" size={24} color="white" />
            </span>
            <span class="file-label text-white font-semibold"
              >Primary file…</span
            >
          </label>
          <button type="submit" class="ml-1 self-center">
            <Icon
              name="hugeicons:circle-arrow-right-01"
              size={30}
              color="rgb(var(--second-color))"
              class="icon text-orange-600"
            />
          </button>
        </form>
        <div
          class="image-row flex overflow-x-scroll overflow-y-hidden rounded mx-5"
          id="image-row"
        >
          <!-- Imagens carregadas -->
        </div>
      </section>

      <section class="info hidden" id="business-info">
        <h2 class="font-bold text-2xl mb-3">Informações do Estabelecimento</h2>
        <h3 class="font-bold text-xl">Endereço</h3>
        <p id="location"></p>
        <h3 class="font-bold text-xl">Telefone</h3>
        <p id="tel"></p>
        <h3 class="font-bold text-xl">Email</h3>
        <p id="email"></p>
        <h3 class="font-bold text-xl">Categoria</h3>
        <p id="category"></p>
        <div class="flex justify-between">
          <h3 class="font-bold text-xl">Tags</h3>
          <Icon
            name="hugeicons:add-square"
            size={30}
            color="rgb(var(--second-color))"
            class="icon text-orange-600 cursor-pointer"
            id="add-tag-action"
          />
        </div>
        <form class="flex" id="tag-form">
          <input
            class="p-2 border border-gray-300 rounded-lg"
            type="text"
            placeholder="Nome da tag"
            id="tag-field"
            required
          />
          <button type="submit" class="ml-1 self-center">
            <Icon
              name="hugeicons:circle-arrow-right-01"
              size={30}
              color="rgb(var(--second-color))"
              class="icon text-orange-600"
            />
          </button>
        </form>
        <ul class="tags list-none flex flex-wrap" id="business-tags"></ul>
      </section>

      <section class="info hidden" id="reviewer-info">
        <h2 class="font-bold text-2xl mb-3">Informações do Avaliador</h2>
        <h3 class="font-bold text-xl">Telefone</h3>
        <p id="reviewer-tel"></p>
        <h3 class="font-bold text-xl">Email</h3>
        <p id="reviewer-email"></p>
        <h3 class="font-bold text-xl">Data de Nascimento</h3>
        <p id="birth"></p>
      </section>
    </div>

    <!-- Modal de Imagem -->
    <article
      class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden"
      id="image-modal"
    >
      <div class="bg-white rounded-lg shadow-lg p-4 max-w-md w-full">
        <Icon
          name="hugeicons:arrow-shrink"
          size={30}
          color="rgb(var(--second-color))"
          class="icon absolute top-3 right-3 text-white cursor-pointer"
          id="close-modal"
        />
        <img
          id="modal-image"
          class="w-full h-auto max-h-[calc(100vh-200px)] object-contain mb-4 rounded"
          src=""
          alt="Imagem"
        />
        <button
          id="delete-modal-image"
          class="w-full bg-red-600 text-white py-2 rounded hover:bg-red-700 transition duration-200"
        >
          Excluir Imagem
        </button>
      </div>
    </article>

    <!-- Modal de Exclusão -->
    <article
      class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden"
      id="modal-delete"
    >
      <div class="bg-slate-50 rounded-lg p-6 shadow-lg w-80">
        <h3 class="text-black text-lg font-semibold mb-4">
          Para excluir sua conta, confirme sua senha
        </h3>
        <input
          type="password"
          id="password"
          placeholder="Senha"
          class="w-full p-2 mb-4 border border-white rounded-md bg-slate-100 text-black placeholder-gray-400"
        />
        <div class="flex justify-between">
          <button
            id="confirm-delete"
            class="bg-orange-600 text-white py-2 px-4 rounded-md hover:bg-orange-700"
            >Excluir</button
          >
          <button
            id="cancel-delete"
            class="bg-gray-600 text-white py-2 px-4 rounded-md hover:bg-gray-500"
            >Cancelar</button
          >
        </div>
      </div>
    </article>

    <!-- Coluna 2: Formulário de Edição e Reviews -->
    <div class="column-2">
      <section class="edit hidden" id="edit-section">
        <h3 class="font-bold text-2xl text-center">
          Editar Informações do Perfil
        </h3>
        <form class="edit-form" id="edit-form">
          <div class="form-group">
            <label for="banner-image" class="block font-semibold"
              >Imagem de Banner:</label
            >
            <label
              class="file-label flex justify-center items-center text-center bg-orange-600 text-white rounded-lg px-4 py-2 cursor-pointer hover:bg-orange-700 transition duration-200"
            >
              <input
                type="file"
                id="banner-image"
                name="banner-image"
                accept="image/*"
                class="hidden"
              />
              <span class="file-icon mr-2 flex justify-center">
                <Icon name="hugeicons:inbox-upload" size={24} color="white" />
              </span>
              <span class="file-label text-white font-semibold"
                >Upload Banner</span
              >
            </label>
          </div>

          <!-- Campo de Imagem de Perfil -->
          <div class="form-group overflow-x-hidden mt-4">
            <label for="profile-image" class="block font-semibold"
              >Imagem de Perfil:</label
            >
            <label
              class="file-label flex text-center bg-orange-600 text-white rounded-lg px-4 py-2 cursor-pointer hover:bg-orange-700 transition duration-200"
            >
              <input
                type="file"
                id="profile-image"
                name="profile-image"
                accept="image/*"
                class="hidden"
              />
              <span class="file-icon mr-2 flex justify-center">
                <Icon name="hugeicons:inbox-upload" size={24} color="white" />
              </span>
              <span class="file-label text-white font-semibold"
                >Upload Perfil</span
              >
            </label>
          </div>

          <!-- Campo Nome -->
          <div class="form-group">
            <label for="name">Nome:</label>
            <input type="text" id="name-field" name="name" />
          </div>

          <!-- Campo Telefone -->
          <div class="form-group">
            <label for="tel">Telefone:</label>
            <input type="tel" id="tel-field" name="tel" />
          </div>

          <!-- Renderização Condicional: Estabelecimento -->
          <div id="business-fields" class="hidden">
            <!-- Campo Região -->
            <div class="form-group">
              <label for="region-field">Região:</label>
              <input type="text" id="region-field" name="region" />
            </div>

            <!-- Campo Bairro -->
            <div class="form-group">
              <label for="bairro-field">Bairro:</label>
              <input type="text" id="bairro-field" name="bairro" />
            </div>

            <!-- Campo Rua -->
            <div class="form-group">
              <label for="street-field">Rua:</label>
              <input type="text" id="street-field" name="rua" />
            </div>

            <!-- Campo Número -->
            <div class="form-group">
              <label for="number-field">Número:</label>
              <input type="text" id="number-field" name="numero" />
            </div>

            <!-- Campo Acréscimos -->
            <div class="form-group">
              <label for="additional-field">Acréscimos (opcional):</label>
              <input type="text" id="additional-field" name="acrescimos" />
            </div>

            <!-- Campo Descrição -->
            <div class="form-group">
              <label for="description-field">Descrição:</label>
              <textarea id="description-field" name="descricao" maxlength="200"
              ></textarea>
            </div>

            <!-- Campo Categoria -->
            <div class="form-group">
              <label for="category-field">Categoria:</label>
              <select name="category-field" id="category-field">
                <option value="" disabled selected>Escolha uma opção</option>
                <option value="alimentacao">ALIMENTACAO</option>
                <option value="entreterimento">ENTRETERIMENTO</option>
              </select>
            </div>
          </div>

          <!-- Renderização Condicional: Avaliador -->
          <div id="reviewer-fields" class="hidden">
            <div class="form-group">
              <label for="birth-field">Data de Nascimento:</label>
              <input type="date" id="birth-field" name="birth" />
            </div>
          </div>

          <!-- Botão Salvar -->
          <button type="submit" class="btn-save font-semibold">Salvar</button>
        </form>
      </section>

      <section class="reviews" id="reviews-section">
        <h3 class="font-bold text-2xl mb-3">Avaliações recentes</h3>
        <div id="reviews"></div>
      </section>
    </div>
  </main>
</Layout>

<script>
  import { jwtDecode } from "jwt-decode";
  import Cookies from "js-cookie";
  import bcrypt from "bcryptjs";
  import { imageConfig } from "astro:assets";
  const apiUrl = import.meta.env.PUBLIC_API_URL;
  const token = Cookies.get("token");

  interface JwtPayload {
    type: number;
    sub: string;
    iat: number;
    exp: number;
    id: number;
  }

  if (token) {
    const decodedToken: JwtPayload = jwtDecode(token);
    const email = decodedToken.sub;
    const type = decodedToken.type;
    const id = decodedToken.id;

    let pwd = "";
    let banner = "";
    let profile = "";
    let data_criacao = "";
    let isUserAcc = true;

    if (type != 1) {
      fetch(`${apiUrl}/avaliador/${email}`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      })
        .then((response) => response.json())
        .then((data) => {
          pwd = data.senhaAvaliador;

          document.getElementById("profile-name").textContent =
            data.nomeAvaliador;
          (document.getElementById("profile-img") as HTMLImageElement).alt =
            `Foto de ${data.nomeAvaliador}`;

          // Mostrar informações do Avaliador
          document.getElementById("reviewer-info").classList.remove("hidden");
          document.getElementById("reviewer-tel").textContent =
            data.telefoneAvaliador;
          document.getElementById("reviewer-email").textContent =
            data.emailAvaliador;
          document.getElementById("birth").textContent =
            data.dataNascimentoAvaliador;

          // Esconder informações de Estabelecimento e campos relacionados
          document.getElementById("business-info").classList.add("hidden");
          document.getElementById("business-fields").classList.add("hidden");
          document.getElementById("business-images").classList.add("hidden");

          // Carregar as imagens
          load_images(data);

          // Carregar dados do formulario de edição
          load_formdata(data);

          // Verifica se o perfil é do usuário logado
          verify_useracc(data);
        })
        .catch((error) => console.error("Erro:", error));
    } else {
      fetch(`${apiUrl}/estabelecimento/${email}`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
        .then((response) => response.json())
        .then((data) => {
          pwd = data.senhaEstabelecimento;
          data_criacao = data.dataCriacaoEstabelecimento;

          document.getElementById("profile-name").textContent =
            data.nomeEstabelecimento;
          document.getElementById("profile-description").textContent =
            data.descricaoEstabelecimento;
          (document.getElementById("profile-img") as HTMLImageElement).alt =
            `Foto de ${data.nomeEstabelecimento}`;

          // Mostrar informações do Estabelecimento
          document.getElementById("business-info").classList.remove("hidden");

          document.getElementById("business-images").classList.remove("hidden");

          // Remove o último ponto e vírgula e divide a string por ";"
          const enderecoArray = data.localidadeEstabelecimento.split(";");

          // Desestrutura os valores
          const [regiao, bairro, rua, numero, complemento] = enderecoArray;

          // Formata o endereço de forma legível
          const enderecoFormatado = `${rua}, ${numero}${complemento && complemento.trim() !== "" ? ", " + complemento : ""} - ${bairro}, Região ${regiao}`;
          document.getElementById("location").textContent = enderecoFormatado;
          document.getElementById("tel").textContent =
            data.telefoneEstabelecimento;
          document.getElementById("email").textContent =
            data.emailEstabelecimento;
          document.getElementById("category").textContent =
            data.categoriaEstabelecimento;

          // Esconder informações de Avaliador e campos relacionados
          document.getElementById("reviewer-info").classList.add("hidden");
          document.getElementById("reviewer-fields").classList.add("hidden");

          // Carrega as tags
          load_tags();

          // Carrega o carrossel de imagens
          load_carousel();

          // Carregar as imagens
          load_images(data);

          // Carregar dados do formulario de edição
          load_formdata(data);

          // Verifica se o perfil é do usuário logado
          verify_useracc(data);
        })
        .catch((error) => console.error("Erro:", error));
    }

    const verify_useracc = (data) => {
      if (email != data.emailAvaliador && email != data.emailEstabelecimento) {
        document.getElementById("profile-actions").classList.add("hidden");
        document.getElementById("tag-form").classList.add("hidden");
        document.getElementById("add-tag-action").classList.add("hidden");
        isUserAcc = false;
      }
    };

    const load_tags = async () => {
      try {
        const response = await fetch(`${apiUrl}/estabelecimento/${id}/tags`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error("Erro ao carregar tags");
        }

        const data = await response.json();
        const tagsContainer = document.getElementById("business-tags");
        document.getElementById("tag-form").classList.add("hidden");
        tagsContainer.innerHTML = ""; // Limpa qualquer conteúdo anterior

        // Itera pelas tags e adiciona ao container
        data.forEach((tag) => {
          const tagItem = document.createElement("li");
          tagItem.className = `tag-item flex items-center border border-gray-300 rounded-full px-3 py-1 m-1 hover:bg-orange-600 hover:text-white transition-colors`;

          const tagName = document.createElement("span");
          tagName.textContent = tag.nomeTag;
          tagName.className = "mr-2";
          tagItem.appendChild(tagName);

          if (isUserAcc) {
            const deleteIcon = document.createElement("i");
            deleteIcon.className = `delete-icon cursor-pointer text-white group-hover:inline`;
            deleteIcon.innerText = "×";

            deleteIcon.addEventListener("click", () => delete_tag(tag.nomeTag));
            tagItem.appendChild(deleteIcon);
          }

          tagsContainer.appendChild(tagItem);
        });
      } catch (error) {
        console.error("Erro:", error);
      }
    };

    // Função para converter blobImagem em base64
    const convertToBase64 = (imageBlob) => {
      return `data:image/png;base64,${imageBlob}`;
    };

    const load_carousel = async () => {
      try {
        const response = await fetch(
          `${apiUrl}/estabelecimento/${id}/imagens`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          },
        );

        if (!response.ok) {
          throw new Error("Erro ao carregar o carrossel");
        }

        const data = await response.json();

        // Obtém o contêiner onde as imagens serão carregadas
        document.getElementById("image-form").classList.add("hidden");
        const imageRow = document.getElementById("image-row");
        imageRow.innerHTML = ""; // Limpa o conteúdo anterior

        // Adiciona cada imagem retornada ao contêiner
        data.forEach((item) => {
          const imgElement = document.createElement("img");
          imgElement.src = convertToBase64(item.blobImagem);
          imgElement.id = "carrossel-img-" + item.idImagem;
          imgElement.classList.add(
            "h-40",
            "mx-2",
            "object-cover",
            "rounded",
            "cursor-pointer",
          );

          // Adiciona um evento de clique para abrir o modal
          imgElement.addEventListener("click", () => {
            const imageModal = document.getElementById(
              "modal-image",
            ) as HTMLImageElement;
            imageModal.src = imgElement.src; // Define a imagem no modal
            imageModal.alt = item.idImagem;
            toggleModalImage();
          });

          imageRow.appendChild(imgElement);
        });

        // Exibe a seção de imagens
        document.getElementById("business-images").classList.remove("hidden");
      } catch (error) {
        console.error("Erro:", error);
      }
    };

    let isModalImageOpen = false;

    const toggleModalImage = () => {
      isModalImageOpen = !isModalImageOpen;
      const modal = document.getElementById("image-modal");
      modal.classList.toggle("hidden", !isModalImageOpen);
    };

    document
      .getElementById("close-modal")
      .addEventListener("click", toggleModalImage);

    // Adicione o evento para excluir a imagem ao clicar no botão
    document
      .getElementById("delete-modal-image")
      .addEventListener("click", () => {
        const imageModal = document.getElementById(
          "modal-image",
        ) as HTMLImageElement;

        delete_image(imageModal.alt); // Chama a função de deletar com o ID da imagem atual
        toggleModalImage(); // Fecha o modal após a exclusão
      });

    const imagensEmProcessoDeletar = new Set();

    const delete_image = async (imageId) => {
      // Verifica se a imagem já está sendo deletada para evitar duplicação
      if (imagensEmProcessoDeletar.has(imageId)) {
        console.warn("A imagem já está em processo de exclusão:", imageId);
        return;
      }

      // Marca a imagem como em processo de exclusão
      imagensEmProcessoDeletar.add(imageId);

      try {
        // Requisição de exclusão
        const response = await fetch(
          `${apiUrl}/estabelecimento/${id}/imagens/${imageId}`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          },
        );

        if (!response.ok) {
          throw new Error("Erro ao deletar a imagem");
        } else {
          // Recarrega o carrossel se a exclusão for bem-sucedida
          load_carousel();
        }
      } catch (error) {
        console.error("Erro:", error.message);
      } finally {
        // Remove a imagem do set, permitindo futuras exclusões
        imagensEmProcessoDeletar.delete(imageId);
      }
    };

    const load_images = (data) => {
      // Exibir imagens
      banner = data.imagemBanner.blobImagem;
      profile = data.imagemPerfil.blobImagem;

      const bannerImg = convertToBase64(banner);
      const perfilImg = convertToBase64(profile);

      (document.getElementById("banner-img") as HTMLImageElement).src =
        bannerImg;
      (document.getElementById("profile-img") as HTMLImageElement).src =
        perfilImg;
    };

    const load_formdata = (data) => {
      (document.getElementById("name-field") as HTMLInputElement).value =
        data.nomeAvaliador || data.nomeEstabelecimento;
      (document.getElementById("tel-field") as HTMLInputElement).value =
        data.telefoneAvaliador || data.telefoneEstabelecimento;

      if (data.localidadeEstabelecimento) {
        // Remove o último ponto e vírgula e divide a string por ";"
        const enderecoArray = data.localidadeEstabelecimento.split(";");

        // Desestrutura os valores
        const [regiao, bairro, rua, numero, complemento] = enderecoArray;

        (document.getElementById("region-field") as HTMLInputElement).value =
          regiao;
        (document.getElementById("bairro-field") as HTMLInputElement).value =
          bairro;
        (document.getElementById("street-field") as HTMLInputElement).value =
          rua;
        (document.getElementById("number-field") as HTMLInputElement).value =
          numero;
        (
          document.getElementById("additional-field") as HTMLInputElement
        ).value = complemento;
      }

      if (data.descricaoEstabelecimento) {
        (
          document.getElementById("description-field") as HTMLInputElement
        ).value = data.descricaoEstabelecimento;
      }

      if (data.dataNascimentoAvaliador) {
        (document.getElementById("birth-field") as HTMLInputElement).value =
          data.dataNascimentoAvaliador;
      }
    };

    document.getElementById("add-tag-action").addEventListener("click", () => {
      document.getElementById("tag-form").classList.toggle("hidden");
    });

    document
      .getElementById("add-image-action")
      .addEventListener("click", () => {
        document.getElementById("image-form").classList.toggle("hidden");
      });

    document.getElementById("tag-form").addEventListener("submit", (event) => {
      event.preventDefault();

      const tag_field = (
        document.getElementById("tag-field") as HTMLInputElement
      ).value;

      fetch(`${apiUrl}/estabelecimento/${id}/tags/${tag_field}`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
        .then(() => load_tags())
        .catch((error) => console.error(error));
    });

    document
      .getElementById("image-form")
      .addEventListener("submit", (event) => {
        event.preventDefault();

        const image_field = (
          document.getElementById("image-field") as HTMLInputElement
        ).files[0];
        parseToBase64(image_field)
          .then((base64String) => {
            const image = base64String.replace(
              /^data:image\/[a-z]+;base64,/,
              "",
            ); // Remove prefixo da imagem base64

            fetch(`${apiUrl}/estabelecimento/${id}/imagens`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({ imagem: image }), // Envia a imagem no corpo
            })
              .then((response) => {
                if (!response.ok) throw new Error("Erro ao enviar imagem");
                load_carousel();
              })
              .catch((error) => console.error("Erro:", error));
          })
          .catch((error) => {
            console.error("Erro ao converter imagem para Base64:", error);
          });
      });

    const delete_tag = async (tag) => {
      try {
        const response = await fetch(
          `${apiUrl}/estabelecimento/${id}/tags/${tag}`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          },
        );

        if (response.ok) {
          load_tags(); // Recarrega as tags após a exclusão
        } else {
          console.error("Erro ao excluir tag");
        }
      } catch (error) {
        console.error("Erro:", error);
      }
    };

    // Mostrar/Esconder formulário de edição ao clicar no ícone de edição
    const edit_action = document.getElementById("edit-action");
    edit_action.addEventListener("click", () => {
      document.getElementById("edit-section").classList.toggle("hidden");

      if (type == 1) {
        // Mostrar campos específicos de Estabelecimento ao editar
        document.getElementById("business-fields").classList.remove("hidden");
        document.getElementById("reviewer-fields").classList.add("hidden");
      } else {
        // Mostrar campos específicos de Avaliador ao editar
        document.getElementById("reviewer-fields").classList.remove("hidden");
        document.getElementById("business-fields").classList.add("hidden");
      }
    });

    const parseToBase64 = (file: File): Promise<string> => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result as string); // Garantindo que o resultado é string
        reader.onerror = (error) => reject(error);
      });
    };

    const edit_form = document.getElementById("edit-form") as HTMLFormElement;

    edit_form.addEventListener("submit", async (event) => {
      event.preventDefault();

      // Obter valores dos campos do formulário
      const name_field = (
        document.getElementById("name-field") as HTMLInputElement
      ).value;
      const tel_field = (
        document.getElementById("tel-field") as HTMLInputElement
      ).value;

      // Verificar se os campos estão vazios
      if (!name_field) {
        return alert("O campo Nome é obrigatório.");
      }
      if (!tel_field) {
        return alert("O campo Telefone é obrigatório.");
      }

      let body: any = {
        id: id,
        nome: name_field,
        telefone: tel_field,
      };

      if (type == 1) {
        // Campos específicos de Estabelecimento
        const category_field = document.getElementById(
          "category-field",
        ) as HTMLSelectElement;

        if (!category_field.value) return alert("Selecione uma categoria.");

        const descricao_field = (
          document.getElementById("description-field") as HTMLInputElement
        ).value;
        const regiao_field = (
          document.getElementById("region-field") as HTMLInputElement
        ).value;
        const bairro_field = (
          document.getElementById("bairro-field") as HTMLInputElement
        ).value;
        const rua_field = (
          document.getElementById("street-field") as HTMLInputElement
        ).value;
        const numero_field = (
          document.getElementById("number-field") as HTMLInputElement
        ).value;
        const acrescimos_field = (
          document.getElementById("additional-field") as HTMLInputElement
        ).value;

        const location_field = `${regiao_field};${bairro_field};${rua_field};${numero_field};${acrescimos_field || " "}`;

        body.localidade = location_field.toLocaleUpperCase();
        body.descricao = descricao_field;
        body.categoria =
          category_field.options[category_field.selectedIndex].text;
        body.dataCriacao = data_criacao;
      } else {
        // Campos específicos de Avaliador
        const birth_field = (
          document.getElementById("birth-field") as HTMLInputElement
        ).value;
        if (!birth_field)
          return alert("O campo Data de Nascimento é obrigatório.");

        body.dataNascimento = birth_field;
      }

      // Adicionando imagens se forem selecionadas
      const profileImage = (
        document.getElementById("profile-image") as HTMLInputElement
      ).files[0];
      const bannerImage = (
        document.getElementById("banner-image") as HTMLInputElement
      ).files[0];

      if (profileImage) {
        const profileBase64 = await parseToBase64(profileImage);
        body.charImagemPerfil = profileBase64.replace(
          /^data:image\/[a-z]+;base64,/,
          "",
        );
      } else body.charImagemPerfil = profile;

      if (bannerImage) {
        const bannerBase64 = await parseToBase64(bannerImage);
        body.charImagemBanner = bannerBase64.replace(
          /^data:image\/[a-z]+;base64,/,
          "",
        );
      } else body.charImagemBanner = banner;

      try {
        const response = await fetch(
          `${apiUrl}/${type === 1 ? "estabelecimento" : "avaliador"}/${id}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify(body),
          },
        );

        if (response.ok) {
          alert("Perfil atualizado com sucesso!");
          window.location.reload();
        } else {
          alert("Erro ao atualizar o perfil.");
        }
      } catch (error) {
        console.error("Erro:", error);
        alert("Ocorreu um erro ao enviar os dados.");
      }
    });

    let isModalDeleteOpen = false;

    const toggleModalDelete = () => {
      isModalDeleteOpen = !isModalDeleteOpen;
      const modal = document.getElementById("modal-delete");
      modal.classList.toggle("hidden", !isModalDeleteOpen);
    };

    const handleDelete = async () => {
      const password = (document.getElementById("password") as HTMLInputElement)
        .value;
      let isPasswordValid = false;

      password.trim().length > 0
        ? (isPasswordValid = await bcrypt.compare(password, pwd))
        : alert("Senha não pode estar vazia"); // Comparação da senha

      if (isPasswordValid) {
        // Senha correta, procede com a exclusão
        const deleteResponse = await fetch(
          `${apiUrl}/${type === 1 ? "estabelecimento" : "avaliador"}/${id}`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          },
        );

        if (deleteResponse.ok) {
          alert("Perfil excluído com sucesso.");
          Cookies.remove("token");
          window.location.href = "/login";
        } else {
          alert("Erro ao excluir o perfil.");
        }

        toggleModalDelete();
      } else {
        alert("Senha incorreta. Tente novamente.");
      }
    };

    // Mostrar modal de exclusão ao clicar no ícone de exclusão
    const delete_action = document.getElementById("delete-action");
    delete_action.addEventListener("click", toggleModalDelete);

    // Cancela a excluão e fecha o modal
    document
      .getElementById("cancel-delete")
      .addEventListener("click", toggleModalDelete);

    // Confirma a exclusão e aciona handleDelete
    document
      .getElementById("confirm-delete")
      .addEventListener("click", handleDelete);
  } else {
    console.error("Token não encontrado");
  }
</script>

<style>
  html,
  body {
    width: 100%;
    height: 100%;
  }

  main {
    @apply flex flex-row gap-10;
    overflow: scroll;
  }

  .column-1 {
    @apply flex flex-col gap-5 w-2/5;
  }

  .column-2 {
    @apply flex flex-col gap-5 w-3/5;
  }

  /* Estilos para a barra de rolagem do elemento com a classe 'image-row' */
  .image-row {
    scrollbar-color: #555 transparent; /* Para navegadores baseados em Firefox */
  }

  .image-row::-webkit-scrollbar {
    height: 10px; /* Altura da barra de rolagem */
  }

  .image-row::-webkit-scrollbar-thumb {
    background-color: rgb(
      var(--second-color)
    ); /* Cor do "thumb" da barra de rolagem */
    border-radius: 10px; /* Bordas arredondadas */
  }

  .image-row::-webkit-scrollbar-track {
    background: transparent; /* Cor do fundo da barra de rolagem */
  }

  /* Estilo da seção de perfil */
  .profile {
    @apply bg-gray-100 rounded-lg shadow-lg flex flex-col items-center relative;
  }

  .banner-image {
    @apply w-full h-32 rounded-t-lg object-cover; /* Define a largura total, altura e arredonda o topo */
    background: rgb(
      var(--support-color)
    ); /* Cor de fundo caso a imagem não carregue */
  }

  .profile-image {
    @apply h-24 rounded-full mt-5;
  }

  .icon {
    @apply transition transform duration-200;
  }

  .icon:hover {
    @apply scale-105;
  }

  .header-info {
    @apply inline-flex justify-between w-full;
  }

  .profile-actions {
    @apply flex px-5 pb-5 justify-between w-full;
  }

  .edit-action {
    @apply text-yellow-500 cursor-pointer;
  }

  .delete-action {
    @apply text-red-600 cursor-pointer;
  }

  /* Estilo da seção de edição */
  .edit {
    @apply bg-gray-50 p-5 rounded-lg shadow-lg text-left;
  }

  .form-group label {
    @apply block text-gray-700 font-semibold indent-1 mb-1;
  }

  .form-group input:not(input[type="file"]),
  select,
  textarea {
    @apply p-2 border border-gray-300 rounded-lg w-full;
  }

  .edit-form {
    @apply flex flex-col gap-5 mt-5;
  }

  .edit-form input:not(input[type="file"]) {
    @apply p-2 border border-gray-300 rounded-lg;
  }

  .btn-save {
    @apply mt-5 text-white p-3 rounded-lg;
    background-color: rgb(var(--support-color));
  }

  .btn-save:hover {
    background-color: rgb(var(--support-darkest-color));
  }

  /* Estilo dos cards de avaliação */
  .review-card {
    @apply bg-white p-5 rounded-lg shadow-lg mb-5;
  }

  /* Cabeçalho da review: Nome e data justificados */
  .review-header {
    @apply flex justify-between items-center mb-3;
  }

  .review-header h4 {
    @apply font-bold text-lg;
  }

  .review-header .review-date {
    @apply text-sm text-gray-500;
  }

  /* Conteúdo da review */
  .review-content {
    @apply mb-3 text-gray-800 text-left text-wrap;
    overflow-wrap: break-word; /* Quebra as palavras muito longas */
    word-wrap: break-word; /* Compatibilidade com versões mais antigas */
    white-space: normal; /* Permite a quebra de linha automática */
  }

  /* Layout do carrossel */
  .review-carousel {
    @apply relative w-full h-48 overflow-hidden rounded-lg mt-3;
  }

  .carousel-images {
    @apply flex w-full h-full transition-transform duration-500 ease-in-out;
  }

  .review-photo {
    @apply w-full h-full object-cover rounded-lg;
  }

  /* Botões de navegação */
  .carousel-prev,
  .carousel-next {
    @apply absolute top-1/2 transform -translate-y-1/2 bg-gray-800 bg-opacity-50 text-white p-2 rounded-full;
    z-index: 10;
    cursor: pointer;
    font-size: 1.5rem;
    transition: background-color 0.2s;
  }

  .carousel-prev {
    left: 10px;
  }

  .carousel-next {
    right: 10px;
  }

  .carousel-prev:hover,
  .carousel-next:hover {
    background-color: rgba(0, 0, 0, 0.7);
  }

  /* Estilo para caso não haja fotos */
  .no-photos {
    @apply italic text-gray-500;
  }

  /* Estilo da seção de tipo (info) */
  .info {
    @apply bg-white px-5 py-8 rounded-lg shadow-lg text-left;

    & p {
      margin-bottom: 10px;
    }
  }

  .info > *:not(.info > h2) {
    margin-left: 20px;
  }

  /* Ajustes de responsividade */
  @media (max-width: 768px) {
    main {
      @apply flex-col;
    }

    .column-1,
    .column-2 {
      @apply w-full;
    }
  }
</style>
